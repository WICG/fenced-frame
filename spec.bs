<pre class="metadata">
Title: Fenced frame
Shortname: fenced-frame
Repository: WICG/fenced-frame
Inline Github Issues: true
Group: WICG
Status: CG-DRAFT
Level: 1
URL: https://wicg.github.io/fenced-frame/
Boilerplate: omit conformance, omit feedback-header
Editor: Dominic Farolino, Google https://www.google.com/, domfarolino@gmail.com, https://domfarolino.com
Abstract: The fenced frame enforces a boundary between the embedding page and the cross-site embedded document such that user data visible to the two sites is not able to be joined together.
!Participate: <a href="https://github.com/WICG/fenced-frame">GitHub WICG/fenced-frame</a> (<a href="https://github.com/WICG/fenced-frame/issues/new">new issue</a>, <a href="https://github.com/WICG/fenced-frame/issues?state=open">open issues</a>)
!Commits: <a href="https://github.com/WICG/fenced-frame/commits/main/spec.bs">GitHub spec.bs commits</a>
Complain About: accidental-2119 yes, missing-example-ids yes
Indent: 2
Default Biblio Status: current
Markup Shorthands: markdown yes
Assume Explicit For: yes
</pre>

<pre class="link-defaults">
</pre>
<pre class="anchors">
urlPrefix: https://www.ietf.org/rfc/rfc4122.txt
  type: dfn; text: urn uuid

spec: prerendering-revamped; urlPrefix: https://wicg.github.io/nav-speculation/prerendering.html
  type: dfn
    for: navigable
      text: loading mode; url: #navigable-loading-mode

spec: html; urlPrefix: https://html.spec.whatwg.org/multipage/
  type: dfn
    text: categories; url: dom.html#concept-element-categories
    text: contexts in which this element can be used; url: dom.html#concept-element-contexts
    text: embedded content; url: dom.html#embedded-content-category
    text: content model; url: dom.html#concept-element-content-model
    text: nothing; url: dom.html#concept-content-nothing
    text: content attributes; url: dom.html#concept-element-attributes
    text: global attributes; url: dom.html#global-attributes
    text: dom interface; url: dom.html#concept-element-dom
    text: accessibility considerations; url: dom.html#concept-element-accessibility-considerations
    text: reflect; url: common-dom-interfaces.html#reflect
    text: width; url: embedded-content-other.html#attr-dim-width
    text: height; url: embedded-content-other.html#attr-dim-height
    text: browsing context group; url: document-sequences.html#browsing-context-group
    text: browsing context group set; url: document-sequences.html#browsing-context-group-set
    text: creator base url; url: document-sequences.html#creator-base-url
    text: create a new browsing context and document; url: document-sequences.html#creating-a-new-browsing-context
    text: create a new browsing context group and document; url: document-sequences.html#creating-a-new-browsing-context-group
    text: initialize the navigable; url: document-sequences.html#initialize-the-navigable
    text: node navigable; url: document-sequences.html#node-navigable
    text: document state; url: browsing-the-web.html#she-document-state
    text: historyHandling; url: browsing-the-web.html#navigation-hh
    text: referrerPolicy; url: browsing-the-web.html#navigation-referrer-policy
    text: activation notification; url: interaction.html#activation-notification
    text: consume user activation; url: interaction.html#consume-user-activation
    for: history handling behavior
      text: replace; url: browsing-the-web.html#hh-replace
    for: document state
      text: document; url: browsing-the-web.html#document-state-document
    for: navigable
      text: active session history entry; url: document-sequences.html#nav-active-history-entry
      text: current session history entry; url: document-sequences.html#nav-current-history-entry
      text: parent; url: document-sequences.html#nav-parent
    for: traversable navigable
      text: session history entries; url: document-sequences.html#tn-session-history-entries
    for: Window
      text: navigable; url: nav-history-apis.html#window-navigable
</pre>

<style>
.selected-text-file-an-issue {
  position: fixed;
  bottom: 0;
  right: 0;
  background: rgba(255, 255, 255, 0.8);
  font-size: smaller;
  padding: 4px 10px;
  z-index: 4;
}

dfn var {
  font-style: italic;
}

table {
  margin: 1em 0;
}

/* WHATWG-style <hr>s, instead of WICG-style. Specific selector is necessary to override WICG styles. */
:not(.head) > :not(.head) + hr {
  display: block;
  background: none;
  border: none;
  padding: 0;
  margin: 3em 0;
  height: auto;
}
:not(.head) > :not(.head) + hr::before {
  content: none;
}

/* WHATWG-style element definition class */
.element {
  background: #EEFFEE;
}
dt {
  margin-top: 12px;
  color: black;
}
dl, dd {
  padding-left: .5em;
}

/* domintro from https://resources.whatwg.org/standard.css */
.domintro {
  position: relative;
  color: green;
  background: #DDFFDD;
  margin: 2.5em 0 2em 0;
  padding: 1.5em 1em 0.5em 2em;
}

.domintro dt, .domintro dt * {
  color: black;
  font-size: inherit;
}
.domintro dd {
  margin: 0.5em 0 1em 2em; padding: 0;
}
.domintro dd p {
  margin: 0.5em 0;
}
.domintro::before {
  content: 'For web developers (non-normative)';
  background: green;
  color: white;
  padding: 0.15em 0.25em;
  font-style: normal;
  position: absolute;
  top: -0.8em;
  left: -0.8em;
}

/* .XXX from https://resources.whatwg.org/standard.css */
.XXX {
  color: #D50606;
  background: white;
  border: solid #D50606;
}
</style>

<script src="https://resources.whatwg.org/file-issue.js" async></script>

<h2 id=the-fencedframe-element>The <dfn element>fencedframe</dfn> element</h2>

<dl class="element">
 <dt>[=Categories=]:</dt>
 <dd>[=Flow content=].</dd>
 <dd>[=Phrasing content=].</dd>
 <dd>[=Embedded content=].</dd>
 <dd>[=Interactive content=].</dd>
 <dd>[=Palpable content=].</dd>
 <dt>[=Contexts in which this element can be used=]:</dt>
 <dd>Where [=embedded content=] is expected.</dd>
 <dt>[=Content model=]:</dt>
 <dd>[=Nothing=].</dd>
 <dt>[=Content attributes=]:</dt>
 <dd>[=Global attributes=]</dd>
 <dd><code>[=width=]</code> — Horizontal dimension</dd>
 <dd><code>[=height=]</code> — Vertical dimension</dd>
 <dt>[=Accessibility considerations=]:</dt>
 <dd><p class=XXX>TODO</p></dd>
 <dt>[=DOM interface=]:</dt>
 <dd>
<xmp class=idl>
[Exposed=Window]
interface HTMLFencedFrameElement : HTMLElement {
  [HTMLConstructor] constructor();

  [CEReactions] attribute FencedFrameConfig? config;
  [CEReactions] attribute DOMString width;
  [CEReactions] attribute DOMString height;
};
</xmp>
</dd>
</dl>

The <{fencedframe}> element represents its [=fencedframe/nested traversable=].

Each <{fencedframe}> has a <dfn for=fencedframe>nested traversable</dfn>, which is either a
[=traversable navigable=] or null. It is initially null.

Each <{fencedframe}> has a <dfn for=fencedframe>config</dfn>, which is either a
{{FencedFrameConfig}} or null. It is initially null.

<div algorithm=insertion>
  When a <{fencedframe}> element is |element| is [=node is inserted into a document|inserted into a
  document=] whose [=Document/browsing context=] is non-null, run these steps:

  1. Let |nested traversable| be the result of [=create a new nested traversable|creating a new
     nested traversable=] for |element|.

  1. Set |nested traversable|'s [=navigable/loading mode=] to "`fencedframe`".

  1. <span class=XXX>Parse the sandbox attributes, once it exists</span>

  1. [=Process the fencedframe attributes=] with |element| and [=initialInsertion=] set to true.
</div>

<div algorithm=process-the-fencedframe-attributes>
  To <dfn>process the <{fencedframe}> attributes</dfn> given a <{fencedframe}> element |element| and
  a boolean <dfn><var>initialInsertion</var></dfn>, run these steps:

  1. [=Assert=]: |element| is [=connected=].

  Issue: It's not necessary to call the <a
  href=https://html.spec.whatwg.org/multipage/browsing-the-web.html#url-and-history-update-steps>URL
  and history update steps</a> as we do during usual <a
  href=https://html.spec.whatwg.org/multipage/iframe-embed-object.html#the-iframe-element:url-and-history-update-steps>child
  navigable creation</a> or <a
  href=https://html.spec.whatwg.org/multipage/nav-history-apis.html#apis-for-creating-and-navigating-browsing-contexts-by-name:url-and-history-update-steps>top-level
  traversable creation</a>, but we still need a mechanism to initialize
  {{History}}.{{History/length}} in the new navigable. This is an existing issue in the HTML
  Standard: <a
  href=https://github.com/whatwg/html/issues/9030>https://github.com/whatwg/html/issues/9030</a>.

  1. If |element|'s [=fencedframe/config=] is null and |initialInsertion| is true, then return.

  1. Let |url| be the [=URL record=] <code>about:blank</code>.

  1. <a spec="HTML" lt="parse a URL">Parse</a> |element|'s [=fencedframe/config=]'s
     [=fencedframeconfig/url=] relative to |element|'s [=Node/node document=]. If this is
     successful, then set [=url=] to the <a spec="HTML">resulting URL record</a>.

  1. [=Navigate=] |element|'s [=fencedframe/nested traversable=] to |url| using |element|'s
     [=Node/node document=], with [=historyHandling=] set to "<a for="history handling
     behavior">`replace`</a>" , and [=referrerPolicy=] set to <a>"`no-referrer`"</a>.
</div>

<div algorithm=destroy>
  When a <{fencedframe}> element is [=removed from a document=], the user agent <p class=XXX>TODO:
  destroy the nested traversable</p>.
</div>

The <dfn attribute for=HTMLFencedFrameElement>config</dfn> IDL attribute getter steps are to return
[=this=]'s [=fencedframe/config=].

<div algorithm=config-setter>
  The {{HTMLFencedFrameElement/config}} IDL attribute setter steps are:

  1. <span class=XXX>TODO</span>
</div>

<h3 id=dimension-attributes>Dimension attributes</h3>

This section details monkeypatches to [[!HTML]]'s <a
href="https://html.spec.whatwg.org/multipage/embedded-content-other.html#dimension-attributes">Dimension
attributes</a> section. This section will be updated to include <{fencedframe}> in the list of
elements that the <code>[=width=]</code> and <code>[=height=]</code> dimension attributes apply to.

<h3 id=fenced-frame-config-interface>The {{FencedFrameConfig}} interface</h3>

One major input to the <{fencedframe}> element is the {{FencedFrameConfig}} interface, which
maps to an internal [=fenced frame config=] [=struct=].

<pre class=idl>
  enum OpaqueProperty {"opaque"};

  typedef (unsigned long or OpaqueProperty) FencedFrameConfigSize;
  typedef (USVString or OpaqueProperty) FencedFrameConfigURL;

  [Exposed=Window]
  interface FencedFrameConfig {
    constructor(USVString url);
    readonly attribute FencedFrameConfigURL? url;
    readonly attribute FencedFrameConfigSize? width;
    readonly attribute FencedFrameConfigSize? height;
  };
</pre>

Issue: Fix the "indistinguishable" IDL bug with the unions above.</span>

Each {{FencedFrameConfig}} has a <dfn for=fencedframeconfig>url</dfn>, which is a string, initially
null.

Each {{FencedFrameConfig}} has a <dfn for=fencedframeconfig>urn uuid</dfn>, which is a [=urn uuid=]
string, initially null.

Note: A {{FencedFrameConfig}}'s [=fencedframeconfig/urn uuid=] is a non-web-exposed unique ID that
serves as the key to the <{fencedframe}> element's [=fencedframe/nested traversable=]'s <span
class=XXX>URN config mapping</span>, which maps [=urn uuids=] to [=fenced frame config=]
[=structs=] (that represent the web-exposed {{FencedFrameConfig}} object).

A <dfn export>fenced frame config</dfn> is a struct with the following [=struct/items=]:

* An <dfn for="fenced frame config">urn uuid</dfn>, a [=urn uuid=] string
* <span class=XXX>TODO: Specify the other members</span>


<h3 id=fence-interface>The {{Fence}} interface</h3>

<span class=XXX>Describe this infrastructure in detail.</span>

<pre class=idl>
  enum FenceReportingDestination {
    "buyer",
    "seller",
    "component-seller",
    "shared-storage-select-url",
  };

  dictionary FenceEvent {
    required DOMString eventType;
    required DOMString eventData;
    required sequence&lt;DOMString&gt; destination;
  };

  [Exposed=Window]
  interface Fence {
      undefined reportEvent(FenceEvent event);
  };
</pre>

<div algorithm>
  The <dfn method for=Fence>reportEvent(<var ignore>event</var>)</dfn> method steps are:

  1. <span class=XXX>Fill this out!</span>
</div>

<h3 id=new-request-destination>New [=request=] [=request/destination=]</h3>

Every distinct element should have its own request destination to allow for special handling when
making requests (fenced frame request behavior deviates from iframe behavior in enough ways to
justify having a separate destination). Update the associated request [=request/destination=] list
to include a new entry, "<code>fencedframe</code>". It will have the [=request/initiator=] "", the
CSP directive <code>fenced-frame-src</code>, and the features HTML's
<code>&lt;fencedframe&gt;</code>.

Add "<code>fencedframe</code>" to the [=non-subresource request=] list and to the [=navigation
request=] list.

Add "<code>fencedframe</code>" to the {{RequestDestination}} enum.

In the [=fetch=] algorithm, step 13.2, where it says:

> A user agent should set value to the first matching statement, if any, switching on request’s
[=request/destination=]:

Add "<code>fencedframe</code>" to the switch cases alongside "<code>document</code>",
"<code>frame</code>", and "<code>iframe</code>".

<h3 id=new-csp-directive>New fenced-frame-src [[!CSP]] [=directive=]</h3>

Fenced frames are a different element from an iframe. Therefore, using the
<b><i>[=frame-src=]</i></b> directive wouldn't give web sites enough control over their CSP rules.
Introduce a new [[!CSP]] [=directive=]: <b><i>fenced-frame-src</i></b>. The monkey-patched
specification is printed below:

<h4 id="directive-fenced-frame-src">`fenced-frame-src`</h4>

The <dfn>fenced-frame-src</dfn> directive restricts the URLs which may be loaded into a
<{fencedframe}>'s [=fencedframe/nested traversable=]. The syntax for the directive's name and value
is described by the following ABNF:

<pre>
  directive-name  = "fenced-frame-src"
  directive-value = <a grammar>serialized-source-list</a>
</pre>

<div id="fenced-frame-src-example" class="example">
  Given a page with the following Content Security Policy:
  <pre>
    <a http-header>Content-Security-Policy</a>: <a>fenced-frame-src</a> https://example.com/
  </pre>

  Fetches for the following code will return a [=network error=], as the URL provided does not match
  `fenced-frame-src`'s <a>source list</a>:

  <pre highlight="html">
    &lt;fencedframe src="https://example.org/"&gt;
    &lt;/fencedframe&gt;
  </pre>
</div>

The <a href="https://w3c.github.io/webappsec-csp/#frame-src-pre-request">Pre-request check</a> and
<a href="https://w3c.github.io/webappsec-csp/#frame-src-post-request">Post-request check</a> will be
the same as the <a href="https://w3c.github.io/webappsec-csp/#directive-frame-src">frame-src</a>'s
check.

<h4 id="default-src-amendment">Amending [=default-src=]</h4>

The [=default-src=] directive's Example 7 and Example 8 will be amended. Where it says:

<pre>
  <a http-header>Content-Security-Policy</a>: <a>connect-src</a> <a grammar>'self'</a>;
                           ...
                           <a>worker-src</a> <a grammar>'self'</a>
</pre>

It will now say:

<pre>
  <a http-header>Content-Security-Policy</a>: <a>connect-src</a> <a grammar>'self'</a>;
                           ...
                           <a>fenced-frame-src</a> <a grammar>'self'</a>;
                           ...
                           <a>worker-src</a> <a grammar>'self'</a>
</pre>

<h4 id="fallback-list-amendment"> Amending The Directive Fallback List</h4>

In the <a href="https://w3c.github.io/webappsec-csp/#directive-fallback-list">directive fallback
list</a>, in step 1, add a new entry to the list:

: "`fenced-frame-src`"
::
  1.  Return `<< "fenced-frame-src", "frame-src", "child-src", "default-src" >>`.


<h2 id=prerendering-monkeypatch>Prerendering specification monkeypatches</h2>

The <a href=https://wicg.github.io/nav-speculation/prerendering.html>Prerendering Revamped</a>
specification defines [=navigable=]'s [=navigable/loading mode=] and the values it can take on. Our
specification adds another value for fenced frames:

: "`fencedframe`"
:: This [=navigable=] is displaying a <{fencedframe}>'s content

<h2 id=html-integration>HTML Integration</h2>

<h3 id=window-extension>Extensions to the {{Window}} interface</h3>

<pre class="idl">
  partial interface Window {
    // Collection of fenced frame APIs
    readonly attribute Fence? fence;
  };
</pre>

Each {{Window}} object has an associated <dfn for=Window>fence</dfn>, which is a {{Fence}} instance created alongside the {{Window}}.

<div algorithm>
  The <dfn attribute for=Window>fence</dfn> getter steps are:
    1. If [=this=]'s [=Window/navigable=]'s [=navigable/loading mode=] is "`fencedframe`", return
       [=this=]'s [=Window/fence=].

    1. Return null.
</div>

<h3 id=creating-browsing-contexts-patch>Modifications to creating browsing contexts</h3>

<div algorithm="creating a new browsing context and document patch">
  In [[HTML]]'s [=creating a new browsing context and document=] algorithm, rewrite the two steps
  starting with;

  1. If |creator| is non-null, then:

  to instead use the tighter condition:

  1. If |creator| is non-null and <var ignore>embedder</var> is not a <{fencedframe}> element, then:
</div>

Note: This is because we need to ensure that we do not leak <var ignore>creator</var>'s [=the
document's referrer|referrer=], [=Document/origin=], [=creator base url=], [=Document/policy
container=], across the fenced frame boundary.

Issue: Ensure we are doing the right thing for [=Document/permissions policy=].

<h3 id=nested-traversables>Nested traversables</h3>

The [[HTML]] Standard organizes [=navigables=] into two categories: [=child navigables=] and
[=traversable navigables=] (also known as [=top-level traversables=]). The introduction of features
like fenced frames, and to a lesser extent <a href=https://github.com/wicg/portals>portals</a>,
complicates this model by adding a new type of [=traversable navigable=] that is *also* a [=child
navigable=]. Because these new frame types are housed in a separate [=browsing context group=] from
their [=navigable/parent=], some concrete level of isolation is expected and required; on the other
hand since they are composed visually inside of *other* [=browsing context groups=], sometimes they
need to behave like the normal [=child navigables=] that we see in e.g., <{iframe}>s.

The complexity here is in deciding when terms like [=navigable container=],
[=navigable/parent|navigable parent=], and [=Document/descendant navigables=] need to cross the
[=traversable navigable=]/[=browsing context group=] boundary, versus when doing so would be unsafe
or incorrect. The examples below illustrate this point.

<p class=example id=fenced-user-activation>When a user [=user activation|activates=] content inside
of a {{Document}}, ordinarily the [=activation notification=] steps give user activation to all
[=Document/ancestor navigables=] and all [=same origin=] [=Document/descendant navigables=]. But
because a <{fencedframe}> can host sensitive content that needs to be isolated from its embedder,
and because [=user activation=] and [=consume user activation|consumption=] offer a communication
vector between these two parties, for the purpose of user activation a <{fencedframe}>'s
[=fencedframe/nested traversable=] cannot not be considered a descendant of its
[=navigable/parent=], nor can its [=navigable/parent=] be considered an ancestor of the
<{fencedframe}>'s [=fencedframe/nested traversable=]. In other words, we consider user activation to
be "fenced" to denote that it never crosses the [=fencedframe/nested traversable=] boundary.</p>

<p class=example id=unfenced-sandbox-inheritance>On the other hand, when a <{fencedframe}>'s
[=fencedframe/nested traversable=] gets [=created a new nested traversable|created=] or
[=navigated=], it <span class=allow-2119>must</span> <a
href=https://html.spec.whatwg.org/#sandboxing:active-sandboxing-flag-set-3>inherit</a> its embedder
{{Document}}'s [=Document/active sandboxing flag set=] as is standard for {{Document}}s in normal
[=child navigables=]. If we did not do this, then the <{fencedframe}> element would be a trivial
sandbox bypass.</p>

This section provides patches to various [[HTML]] definitions (and their uses) that deal with
collections of related navigables, with the intention of fencing and unfencing uses appropriately.

In [[HTML]]'s <a
href=https://html.spec.whatwg.org/multipage/document-sequences.html#nested-navigables>Nested
navigables</a> section, add the following algorithm:

<div algorithm>
  To <dfn>create a new nested traversable</dfn> given an element |element|:

  1. Let |group| be a new [=browsing context group=].

  Note: There doesn't seem to be a reason to [=set/append=] |group| to the user agent's [=browsing
  context group set=] like [=create a new browsing context group and document=] does.

  1. Let |document| be the second return value of [=creating a new browsing context and document=]
     given |element| [=Node/node document=], |element|, and |group|.

  1. Let |documentState| be a new [=document state=], whose [=document state/document=] is |document|.

  1. Let |traversable| be a new [=traversable navigable=].

  1. Let |parentNavigable| be |element|'s [=node navigable=].

  1. [=Initialize the navigable=] |traversable| given |documentState| and |parentNavigable|.

  1. Let |initialHistoryEntry| be |traversable|'s [=navigable/active session history entry=].

  1. Set |initialHistoryEntry|'s step to 0.

  1. [=Append=] |initialHistoryEntry| to |traversable|'s [=traversable navigable/session history
     entries=].

  1. Return |traversable|.
</div>

Note: The [=create a new nested traversable=] algorithm creates the first kind of [=traversable
navigable=] that is not a [=top-level traversable=]. This will require removing the note about
nested traversables in [[HTML]]'s <a
href=https://html.spec.whatwg.org/multipage/document-sequences.html#top-level-traversables>Top-level
traversables</a> section.
